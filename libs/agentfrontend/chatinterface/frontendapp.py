import streamlit as st

import os.path as osp
import sys

import random

from pydantic import BaseModel
from typing import Optional, Any

script_dir = osp.dirname(__file__)
sys.path.insert(0, osp.dirname(script_dir))
from _ui.generaloptions import change_button_style, detect_browser, change_button_style_image

from _api.vpic import VpicClient
import re

def shuffle_tuple(tup, fixed_elements=3, prob=0.20):
    """Return a new tuple with elements shuffled, except for one element."""
    if len(tup) <= fixed_elements:
        return tup
    
    lst = list(tup)  # 
    if random.random() < prob:  # probability to swap
        index = random.randint(0, fixed_elements - 1)  # Select a random index from first (n) elements
        swap = random.randint(fixed_elements, len(lst) - 1)  # Select a random index to swap 
        lst[index] = lst[swap]  # Swap the selected element with the last element
    return tuple(lst[:fixed_elements])  # Convert list back to tuple

def vin_year_extract(text: str, partial: bool = True) -> tuple:
    """
    Extracts VIN and year from a given text.
    Args:
        text (str): Input text containing VIN and year.
    Returns:
        tuple: A tuple containing the extracted (partial) VIN and year, or (None, None) if not found.
    """
    vin_pattern = re.search(r'\b[A-HJ-NPR-Z0-9]{17}\b', text)
    year_pattern = re.search(r'\b(19|20)\d{2}\b', text)
    if vin_pattern and year_pattern:
        vin = vin_pattern.group()[:11]
        return vin[:8] + '*' + vin[9:] if partial else vin_pattern.group(), year_pattern.group()
    else:
        return None, None

class ChatBotApp(BaseModel):
    title: str = 'My First LLM Chat'
    description: Optional[str]= None
    caption: str = 'Responses are generated by AI and may be inaccurate or inappropriate.'
    buttons: tuple = (
        ('Button 1', 'This is my short instruction content, with multiline instruction', None),
        ('Button 2', 'This is my short instruction content, with multiline instruction', None),
        ('Button 3', 'This is my short instruction content, with multiline instruction', None),
    )
    buttontype: str = 'text'
    conversation_memory: int = 4
    vinclient: Any = VpicClient
    
    def _apppagedefault(self, title="Claim AI", icon="ðŸ¦œ"):
        st.set_page_config(
            page_title = title,
            page_icon = icon
        )

        with st.sidebar:
            st.title('ðŸ¦œ Claim AI')
            st.write("â›¶  New Conversation")

    def _shorttermmemory(self):
        "Static Method to store chat history"
        st.session_state['message'] = st.session_state['message'][-self.conversation_memory:]

    @staticmethod
    def _setstate(session, state):
        if session not in st.session_state:
            st.session_state[session] = state

    def _render(self):
        "Renders the chatbot UI"
        st.title(self.title)
        st.caption(self.caption)
        st.write(self.description)

        styling = change_button_style if self.buttontype == 'text' else change_button_style_image
        
        button_topn = shuffle_tuple(self.buttons)
        cols = st.columns(len(button_topn))

        for i, entry in enumerate(button_topn):   
            title, render_object, action = entry
                # Add more conditions for other actions if needed
            cols[i].button(title, key=f"button_{i}", on_click=getattr(self, action) if action else None)
            styling(title, title, render_object)

        st.chat_input("Ask me anything...", key="chat_input", disabled=st.session_state.get("input_disabled", False))
        if st.session_state.get("chat_input"):
            default_response = "Hi, this is a default bot response. I am still learning."
            user_message = {"role": "user", "content": st.session_state["chat_input"]}
            assistant_message = {"role": "assistant", "content": default_response}

            st.session_state['message'].append(user_message)
            st.session_state['message'].append(assistant_message)
        
        # Display chat history on app rerun
        chat_history = st.session_state.get("message", [])
        for message in chat_history:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

    @staticmethod
    def vin_decode():
        assistant_message = {"role": "assistant", "content": "Please provide the VIN number and the year of the vehicle."}
        st.session_state['message'].append(assistant_message)
        st.session_state['input_disabled'] = True
        st.chat_input("Enter VIN number and year...", key="vin_input")

    @staticmethod
    def _zcheck():
        "Static Method to check browser"
        with st.container():
            detect_browser()
        
    def __call__(self, debug:str = False):
        if debug:
            self._render
            self._zcheck
        else:
            self._setstate(session='message', state=[])
            self._setstate(session='input_disabled', state=False)
            self._shorttermmemory()
            self._apppagedefault()
            self._render()
            self._zcheck()


if __name__=="__main__":
    ui = ChatBotApp(
        title='Claims AI-Assistant',
        description= """
        Description: An AI-Powered Claims Assistant designed to help adjusters in contact centers quickly and effectively
        respond to customers needs within a single application.
        """,
        buttons=(
            ('Doc Intelligence', 'https://images.pexels.com/photos/1109541/pexels-photo-1109541.jpeg', None),
            ('Summarize', 'https://images.pexels.com/photos/699122/pexels-photo-699122.jpeg', None),
            ('VIN Decoding', 'https://www.shutterstock.com/image-vector/magnifying-glass-car-selling-icon-600nw-431692936.jpg', 'vin_decode'),
            ('Claim-oween', 'https://images.pexels.com/photos/3095465/pexels-photo-3095465.png', None),
        ),
        buttontype='image'
    )
    ui(False)
    