import streamlit as st

import os.path as osp
import sys
import uuid

from pydantic import BaseModel
from typing import Optional

script_dir = osp.dirname(__file__)
sys.path.insert(0, osp.dirname(script_dir))
from _ui.generaloptions import change_button_style, detect_browser


class ChatBotApp(BaseModel):
    title: str = 'My First LLM Chat'
    description: Optional[str]= None
    caption: str = 'Responses are generated by AI and may be inaccurate or inappropriate.'
    buttons: tuple = (
        ('Button 1', 'This is my short instruction content, with multiline instruction'),
        ('Button 2', 'This is my short instruction content, with multiline instruction'),
        ('Button 3', 'This is my short instruction content, with multiline instruction'),
    )

    def _apppagedefault(self, title="Chat Bot App", icon="ðŸ¦œ"):
        st.set_page_config(
            page_title = title,
            page_icon = icon
        )

    def _render(self):
        "Renders the chatbot UI"
        st.title(self.title)
        st.caption(self.caption)
        st.write(self.description)

        cols = st.columns(len(self.buttons))
        for i, entry in enumerate(self.buttons):   
            cols[i].button(entry[0], key=f"button_{i}")
            change_button_style(entry[0], entry[0], entry[1])

        prompt = st.chat_input("Say something")
        if prompt:
            with st.chat_message("user"):
                st.write(f"User has sent the following prompt: {prompt}")
            with st.chat_message("assistant"):
                st.write("Hello ðŸ‘‹, I am the Assistant")

    @staticmethod
    def _zcheck():
        "Static Method to check browser"
        with st.container():
            detect_browser()
        
    def __call__(self, debug:str = False):
        if debug:
            self._render
            self._zcheck
        else:
            self._apppagedefault()
            self._render()
            self._zcheck()


if __name__=="__main__":
    ui = ChatBotApp(
        title='ðŸš— Claims AI-Assistant',
        description= """
        Description: An AI-Powered Claims Assistant designed to help adjusters in contact centers quickly and effectively
        respond to customers needs within a single application.
        """,
        buttons=(
        ('Help me with claim', 'Provides the adjuster helpful info to begin the conversation'),
        ('Document Intelligence', 'Provides a summary of an uploaded image and extracts relevant claim information'),
        ('Summarize', 'Help summarize the current conversation between the adjuster and the AI assistant.'),
    )
    )
    ui(False)
    